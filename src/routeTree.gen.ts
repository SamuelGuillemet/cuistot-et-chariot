/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthedDashboardRouteImport } from './routes/_authed/dashboard'
import { Route as AuthedHouseholdIndexRouteImport } from './routes/_authed/household/index'
import { Route as AuthedHouseholdNewRouteImport } from './routes/_authed/household/new'
import { Route as AuthedHouseholdJoinIdRouteImport } from './routes/_authed/household/join.$id'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedDashboardRoute = AuthedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedHouseholdIndexRoute = AuthedHouseholdIndexRouteImport.update({
  id: '/household/',
  path: '/household/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedHouseholdNewRoute = AuthedHouseholdNewRouteImport.update({
  id: '/household/new',
  path: '/household/new',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedHouseholdJoinIdRoute = AuthedHouseholdJoinIdRouteImport.update({
  id: '/household/join/$id',
  path: '/household/join/$id',
  getParentRoute: () => AuthedRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthedDashboardRoute
  '/household/new': typeof AuthedHouseholdNewRoute
  '/household': typeof AuthedHouseholdIndexRoute
  '/household/join/$id': typeof AuthedHouseholdJoinIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthedDashboardRoute
  '/household/new': typeof AuthedHouseholdNewRoute
  '/household': typeof AuthedHouseholdIndexRoute
  '/household/join/$id': typeof AuthedHouseholdJoinIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authed/dashboard': typeof AuthedDashboardRoute
  '/_authed/household/new': typeof AuthedHouseholdNewRoute
  '/_authed/household/': typeof AuthedHouseholdIndexRoute
  '/_authed/household/join/$id': typeof AuthedHouseholdJoinIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/dashboard'
    | '/household/new'
    | '/household'
    | '/household/join/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/household/new'
    | '/household'
    | '/household/join/$id'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/_authed/dashboard'
    | '/_authed/household/new'
    | '/_authed/household/'
    | '/_authed/household/join/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/dashboard': {
      id: '/_authed/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedDashboardRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/household/': {
      id: '/_authed/household/'
      path: '/household'
      fullPath: '/household'
      preLoaderRoute: typeof AuthedHouseholdIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/household/new': {
      id: '/_authed/household/new'
      path: '/household/new'
      fullPath: '/household/new'
      preLoaderRoute: typeof AuthedHouseholdNewRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/household/join/$id': {
      id: '/_authed/household/join/$id'
      path: '/household/join/$id'
      fullPath: '/household/join/$id'
      preLoaderRoute: typeof AuthedHouseholdJoinIdRouteImport
      parentRoute: typeof AuthedRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthedRouteChildren {
  AuthedDashboardRoute: typeof AuthedDashboardRoute
  AuthedHouseholdNewRoute: typeof AuthedHouseholdNewRoute
  AuthedHouseholdIndexRoute: typeof AuthedHouseholdIndexRoute
  AuthedHouseholdJoinIdRoute: typeof AuthedHouseholdJoinIdRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedDashboardRoute: AuthedDashboardRoute,
  AuthedHouseholdNewRoute: AuthedHouseholdNewRoute,
  AuthedHouseholdIndexRoute: AuthedHouseholdIndexRoute,
  AuthedHouseholdJoinIdRoute: AuthedHouseholdJoinIdRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
